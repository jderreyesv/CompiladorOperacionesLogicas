
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 12 00:41:36 COT 2015
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import tree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 12 00:41:36 COT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\012\006\004\010\007\012\005\013\006\001" +
    "\002\000\012\006\004\010\007\012\005\013\006\001\002" +
    "\000\012\002\ufffa\004\ufffa\005\ufffa\011\ufffa\001\002\000" +
    "\014\002\ufffb\004\ufffb\005\ufffb\007\020\011\ufffb\001\002" +
    "\000\012\006\004\010\007\012\005\013\006\001\002\000" +
    "\010\002\012\004\011\005\013\001\002\000\012\006\004" +
    "\010\007\012\005\013\006\001\002\000\004\002\000\001" +
    "\002\000\012\006\004\010\007\012\005\013\006\001\002" +
    "\000\012\002\uffff\004\uffff\005\uffff\011\uffff\001\002\000" +
    "\012\002\001\004\001\005\001\011\001\001\002\000\010" +
    "\004\011\005\013\011\017\001\002\000\012\002\ufffd\004" +
    "\ufffd\005\ufffd\011\ufffd\001\002\000\012\006\004\010\007" +
    "\012\005\013\006\001\002\000\012\002\ufffc\004\ufffc\005" +
    "\ufffc\011\ufffc\001\002\000\012\002\ufffe\004\ufffe\005\ufffe" +
    "\011\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\004\002\007\001\001\000\004\002\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\015" +
    "\001\001\000\002\001\001\000\004\002\014\001\001\000" +
    "\002\001\001\000\004\002\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\020\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculatorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculatorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculatorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 /* Cambia el metodo report_error para que muestre la linea y la columna
 	donde ocurre el error al momento de ingresar datos asi como tambien el
 	mensaje que se quiere mostrar con String 'message'. */
    
    public void report_error(String message, Object info) {
   
        /* Crea un StringBuffer llamado 'm' con la cadena 'Error' en el mismo. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Comprueba si la informacion pasada al metodo es del mismo tipo 
           que java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declara un objeto java_cup.runtime.Symbol 's' con la
               informacion de el object info que esta siendo accesada
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Comprueba si el numero de linea en la entrada es mayor o
               igua a 0. */
            if (s.left >= 0) {                
                /* Agrega al final del StringBuffer el mensaje de error
                   y el numero de linea del error en la entrada. */
                m.append(" in line "+(s.left+1));   
                /* Comprueba si el numero de columan en la entrada es mayor
                   o igual a 0 */
                if (s.right >= 0)                    
                    /* Agrega al final del StringBuffer el mensaje de error 
                       y el numero de columna del error en la entrada. */
                    m.append(", column "+(s.right+1));
            }
           	/*Agrega al final del StringBuffer el mensaje de error creado en
           	este metodo es decir el mensaje que fue pasado como parametro en el metodo. */
            m.append(" : "+message);
            
            /* Imprime el contenido del StringBuffer 'm', que contiene un mensaje de error. */
			System.err.println(m);
        }
	}
	
	/* Cambia el metodo report_fatal_error y cuando este reporta un error fatal
       muestra el numero de linea y columna donde ocurrio el error fatal
       al momento de la entrada de datos asi como tambien la razon por la cual
       el error fatal fue pasada en el metodo en el objeto 'message' entonces puede salir.*/
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		//System.exit(1);

    }
 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalculatorCup$actions {
  private final parser parser;

  /** Constructor */
  CUP$CalculatorCup$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalculatorCup$do_action(
    int                        CUP$CalculatorCup$act_num,
    java_cup.runtime.lr_parser CUP$CalculatorCup$parser,
    java.util.Stack            CUP$CalculatorCup$stack,
    int                        CUP$CalculatorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculatorCup$result;

      /* select the action based on the action number */
      switch (CUP$CalculatorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= NUMBER 
            {
              Tree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.peek()).value;
		 RESULT = new Booleano(n); 
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          return CUP$CalculatorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Tree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.peek()).value;
		 RESULT = new Identifier(s); 
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          return CUP$CalculatorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= IDENT ASSIGN expr 
            {
              Tree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).right;
		Tree e = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.peek()).value;
		 RESULT = new Assignment(s, e); 
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          return CUP$CalculatorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= LPAREN expr RPAREN 
            {
              Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)).right;
		Tree e = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)).value;
		 RESULT = e; 
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          return CUP$CalculatorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NOT expr 
            {
              Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).right;
		Tree e1 = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.peek()).value;
		 RESULT = new Not(e1); 
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          return CUP$CalculatorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr OR expr 
            {
              Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).right;
		Tree e1 = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).right;
		Tree e2 = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          return CUP$CalculatorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)).right;
		Tree start_val = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)).value;
		RESULT = start_val;
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-1)), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculatorCup$parser.done_parsing();
          return CUP$CalculatorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= expr AND expr 
            {
              Tree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).right;
		Tree e1 = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()).right;
		Tree e2 = (Tree)((java_cup.runtime.Symbol) CUP$CalculatorCup$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$CalculatorCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.elementAt(CUP$CalculatorCup$top-2)), ((java_cup.runtime.Symbol)CUP$CalculatorCup$stack.peek()), RESULT);
            }
          return CUP$CalculatorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

